<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	default-lazy-init="true">	

	<context:component-scan base-package="com.mono">
		<context:exclude-filter type="regex" expression="com.mono.core.dao.jdbc.*"/>
	</context:component-scan>

	<context:property-placeholder location="classpath*:database.properties" />

	<!-- 数据库参数 <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations"> <list> <value>classpath*:database.properties</value> 
		</list> </property> </bean> -->

	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource"></constructor-arg>
	</bean>

	<!-- 数据源 <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
		<property name="driverClassName" value="${db.driver}" /> <property name="url" 
		value="${db.url}" /> <property name="username" value="${db.user}" /> <property 
		name="password" value="${db.password}" /> </bean> -->
 
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${db.url}" />
		<property name="user" value="${db.user}" />
		<property name="password" value="${db.password}" />
		<property name="driverClass" value="${db.driver}" />
	</bean>

	<!-- Hibernate配置 -->
	<!-- bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.use_second_level_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache_region_factory_class}</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${hibernate.ehcache_config_file}</prop>
				<!-- <prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop> -->
			</props>
		</property>

		<!-- 在此包下自动搜索实体对象 -->
		<property name="packagesToScan">
			<list>
				<value>com.mono.entity</value>
				<value>com.mono.core.entity</value>
			</list>
		</property>

		<!-- <property name="packagesToScan"> <list> <value>com.mono.entity</value> 
			<value>com.mono.dao</value> <value>com.mono.service</value> </list> </property> -->
		<!-- <property name="annotatedClasses"> <list> <value>com.mono.model.Bz</value> 
			</list> </property> -->
	</bean>

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 使用annotation定义AOP -->
	<!-- proxy-target-class属性若此值为true强制使用CGLIB代理；expose-proxy属性是为了目标对象内部的自我调用无法实施切面中增加 -->
	<aop:aspectj-autoproxy />
</beans>