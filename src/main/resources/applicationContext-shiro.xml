<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	default-lazy-init="true">

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- override these for application-specific URLs if you like: 
		<property name="loginUrl" value="/login.jsp"/>
		<property name="successUrl" value="/home.jsp"/> 
		<property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <property name="unauthorizedUrl" value="/unauth"/> 
		-->
		
        <!-- 默认的登陆访问url -->
        <property name="loginUrl" value="/login"/>
        <!-- 登陆成功后跳转的url -->
        <property name="successUrl" value="/index"/>
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean -->
		<!-- defined will be automatically acquired and available via its beanName in chain -->
		<!-- definitions, but you can perform instance overrides or name aliases  here if you like: -->
		<!-- 
		<property name="filters"> 
			<util:map>
				 <entry key="anAlias" value-ref="someFilter"/> 
			</util:map> 
		</property> 
		-->
		<!-- # some example chain definitions: 
		/admin/** = authc, roles[admin] 
		/docs/** = authc, perms[document:read] 
		/** = authc 
		# more URL-to-FilterChain definitions here -->
		<property name="filterChainDefinitions">
			<value>
				/statics/** = anon
                /login = anon
				 /** = authc
			</value>
		</property>
	</bean>

	<!-- Define any javax.servlet.Filter beans you want anywhere in this application context. -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
	<!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly add them -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details. 
	<bean id="someFilter" class="..." /> 
	<bean id="anotherFilter" class="..."> ... </bean>
	 -->

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
		<property name="realm" ref="myRealm" />
		<!-- By default the servlet container sessions will be used. Uncomment this line to use shiro's native sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native"/> -->
	</bean>

	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="myRealm" class="com.mono.core.shiro.ShiroDbRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>

	<bean id="credentialsMatcher" class="com.mono.core.shiro.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="ehCacheManager" />
        <property name="hashAlgorithmName" value="SHA-256"/>
        <!-- salt是否hashed -->
        <!-- <property name="hashSalted" value="true"/> -->
        <!-- 加密迭代次数 -->
        <property name="hashIterations" value="3"/>
	</bean>

	<bean id="ehCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml" />
	</bean>

</beans>